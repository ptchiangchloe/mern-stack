{"version":3,"sources":["../server/issue.js"],"names":["validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","status","owner","effort","created","completionDate","title","validateIssue","issue","field","type"],"mappings":";;;;;;AAAA,IAAMA,gBAAgB,GAAG;AACrBC,EAAAA,GAAG,EAAE,IADgB;AAErBC,EAAAA,IAAI,EAAE,IAFe;AAGrBC,EAAAA,QAAQ,EAAE,IAHW;AAIrBC,EAAAA,KAAK,EAAE,IAJc;AAKrBC,EAAAA,QAAQ,EAAE,IALW;AAMrBC,EAAAA,MAAM,EAAE;AANa,CAAzB;AASA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,UADW;AAEnBC,EAAAA,KAAK,EAAE,UAFY;AAGnBC,EAAAA,MAAM,EAAE,UAHW;AAInBC,EAAAA,OAAO,EAAE,UAJU;AAKnBC,EAAAA,cAAc,EAAE,UALG;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAAvB,C,CASA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,OAAI,IAAMC,KAAV,IAAmBT,cAAnB,EAAmC;AAC/B,QAAMU,IAAI,GAAGV,cAAc,CAACS,KAAD,CAA3B;;AACA,QAAG,CAACC,IAAJ,EAAU;AACN,aAAOF,KAAK,CAACC,KAAD,CAAZ;AACH,KAFD,MAEO,IAAIC,IAAI,KAAK,UAAT,IAAuB,CAACF,KAAK,CAACC,KAAD,CAAjC,EAA0C;AAC7C,uBAAUA,KAAV;AACH;AACJ;;AAED,MAAG,CAAChB,gBAAgB,CAACe,KAAK,CAACP,MAAP,CAApB,EAAoC;AAChC,qBAAUO,KAAK,CAACP,MAAhB;AACH;;AAED,SAAO,IAAP;AACH,C,CAID;AACA;AACA;AAEA;AACA;;;eAEe;AAAEM,EAAAA,aAAa,EAAbA;AAAF,C","sourcesContent":["const validIssueStatus = {\n    New: true,\n    Open: true,\n    Assigned: true,\n    Fixed: true,\n    Verified: true,\n    Closed: true,\n}\n\nconst issueFieldType = {\n    status: 'required',\n    owner: 'required',\n    effort: 'optional',\n    created: 'required',\n    completionDate: 'optional',\n    title: 'required',\n}\n\n// check all the request body's each property's value has correct data type.\n// dates have to be proper dates\n// data relationship validation\n// such as completion date that cannot be lesser than the created or current date. \n// introduce front end validations for more instant user-friendly error messages.\n\nfunction validateIssue(issue) {\n    for(const field in issueFieldType) {\n        const type = issueFieldType[field]\n        if(!type) {\n            delete issue[field]\n        } else if (type === 'required' && !issue[field]) {\n            return `${field} is required .`;\n        }\n    }\n\n    if(!validIssueStatus[issue.status]) {\n        return `${issue.status} is not a valid status.`;\n    }\n\n    return null\n}\n\n\n\n// APIs are all about intuitiveness and predictability. \n// REST gives you a framework for how to think about the structure APIs.\n// how to implement and consume APIs. \n\n// Representational state trasfer is a software archietectural style that defines a set of constraints to be used for \n// creating Web services.\n\nexport default { validateIssue }"],"file":"issue.js"}