{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","Error","app","use","express","bodyParser","json","db","MongoClient","connect","useUnifiedTopology","then","connection","listen","console","log","err","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","req","res","collection","find","toArray","issues","metadata","total_count","length","_metadata","records","error","status","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","result","_id","insertedId","limit","next"],"mappings":"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","sourcesContent":["import 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nthrow new Error('Test!');\n\nimport express from 'express'; \nimport bodyParser from 'body-parser'; \nimport { MongoClient } from 'mongodb'; \nimport Issue from './issue.js';\n\nconst app = express();\n\napp.use(express.static('static'))\napp.use(bodyParser.json())\n\napp.use('/static', express.static('public'));\n\nlet db;\n\nMongoClient.connect('mongodb://localhost', { useUnifiedTopology: true }).then(connection => {\n    db = connection.db('issuetracker')\n    app.listen(3000, function() {\n        console.log('App started on port 3000')\n    })\n}).catch(err => console.log('ERROR:', err))\n\nif (process.env.NODE_ENV !== 'production') {\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware');\n\n    const config = require('../webpack.config');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n    app.use(webpackHotMiddleware(bundler, { log: console.log }))\n}\n\napp.get('/api/issues', (req, res) => {\n    db.collection('issues').find().toArray().then(issues => {\n        const metadata = { total_count: issues.length };\n        res.json({_metadata: metadata, records: issues})\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({message: `Internal Server Error: ${error}`})\n    })\n})\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n    if(!newIssue.status) {\n        newIssue.status = 'New';\n    }\n\n    const err = Issue.validateIssue(newIssue)\n\n    if(err) {\n        res.status(422).json({  message: `Invalid request: ${err}`});\n        return;\n    }\n\n    db.collection('issues').insertOne(newIssue)\n    .then(result => db.collection('issues').find({_id: result.insertedId }).limit(1).next())\n    .then(newIssue => {\n        res.json(newIssue)\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}`});\n    });\n});"],"file":"server.js"}